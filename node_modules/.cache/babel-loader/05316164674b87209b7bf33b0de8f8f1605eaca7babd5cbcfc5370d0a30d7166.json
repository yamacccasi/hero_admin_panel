{"ast":null,"code":"const initialState = {\n  heroes: [],\n  heroesLoadingStatus: 'idle',\n  filters: [],\n  filtersLoadingStatus: 'idle',\n  activeFilter: 'all'\n};\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'HEROES_FETCHING':\n      return {\n        ...state,\n        heroesLoadingStatus: 'loading'\n      };\n    case 'HEROES_FETCHED':\n      return {\n        ...state,\n        heroes: action.payload,\n        heroesLoadingStatus: 'idle'\n      };\n    case 'HEROES_FETCHING_ERROR':\n      return {\n        ...state,\n        heroesLoadingStatus: 'error'\n      };\n    case 'FILTERS_FETCHING':\n      return {\n        ...state,\n        filtersLoadingStatus: 'loading'\n      };\n    case 'FILTERS_FETCHED':\n      return {\n        ...state,\n        filters: action.payload,\n        filtersLoadingStatus: 'idle'\n      };\n    case 'FILTERS_FETCHING_ERROR':\n      return {\n        ...state,\n        filtersLoadingStatus: 'error'\n      };\n    case 'ACTIVE_FILTER_CHANGED':\n      return {\n        ...state,\n        activeFilter: action.payload\n      };\n    // Самая сложная часть - это показывать новые элементы по фильтрам\n    // при создании или удалении\n    case 'HERO_CREATED':\n      // Формируем новый массив\n      return {\n        ...state,\n        heroes: [...state.heroes, action.payload]\n      };\n    case 'HERO_DELETED':\n      // Формируем новый массив\n      const newHeroList = state.heroes.filter(item => item.id !== action.payload);\n      return {\n        ...state,\n        heroes: newHeroList,\n        // Фильтруем новые данные по фильтру, который сейчас применяется\n        filteredHeroes: state.activeFilter === 'all' ? newHeroList : newHeroList.filter(item => item.element === state.activeFilter)\n      };\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["initialState","heroes","heroesLoadingStatus","filters","filtersLoadingStatus","activeFilter","reducer","state","action","type","payload","newHeroList","filter","item","id","filteredHeroes","element"],"sources":["/Users/maxympetlyak/Desktop/REDUX/hero_admin_panel_template/src/reducers/index.js"],"sourcesContent":["const initialState = {\n    heroes: [],\n    heroesLoadingStatus: 'idle',\n    filters: [],\n    filtersLoadingStatus: 'idle',\n    activeFilter: 'all',\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'HEROES_FETCHING':\n            return {\n                ...state,\n                heroesLoadingStatus: 'loading'\n            }\n        case 'HEROES_FETCHED':\n            return {\n                ...state,\n                heroes: action.payload,\n                heroesLoadingStatus: 'idle'\n            }\n        case 'HEROES_FETCHING_ERROR':\n            return {\n                ...state,\n                heroesLoadingStatus: 'error'\n            }\n        case 'FILTERS_FETCHING':\n            return {\n                ...state,\n                filtersLoadingStatus: 'loading'\n            }\n        case 'FILTERS_FETCHED':\n            return {\n                ...state,\n                filters: action.payload,\n                filtersLoadingStatus: 'idle'\n            }\n        case 'FILTERS_FETCHING_ERROR':\n            return {\n                ...state,\n                filtersLoadingStatus: 'error'\n            }\n        case 'ACTIVE_FILTER_CHANGED':\n            return {\n                ...state,\n                activeFilter: action.payload\n            }\n        // Самая сложная часть - это показывать новые элементы по фильтрам\n        // при создании или удалении\n        case 'HERO_CREATED':\n            // Формируем новый массив\n            return {\n                ...state,\n                heroes: [...state.heroes, action.payload],\n            }\n        case 'HERO_DELETED':\n            // Формируем новый массив\n            const newHeroList = state.heroes.filter(item => item.id !== action.payload);\n            return {\n                ...state,\n                heroes: newHeroList,\n                // Фильтруем новые данные по фильтру, который сейчас применяется\n                filteredHeroes: state.activeFilter === 'all' ?\n                    newHeroList :\n                    newHeroList.filter(item => item.element === state.activeFilter)\n            }\n        default: return state\n    }\n}\n\nexport default reducer;"],"mappings":"AAAA,MAAMA,YAAY,GAAG;EACjBC,MAAM,EAAE,EAAE;EACVC,mBAAmB,EAAE,MAAM;EAC3BC,OAAO,EAAE,EAAE;EACXC,oBAAoB,EAAE,MAAM;EAC5BC,YAAY,EAAE;AAClB,CAAC;AAED,MAAMC,OAAO,GAAGA,CAACC,KAAK,GAAGP,YAAY,EAAEQ,MAAM,KAAK;EAC9C,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,iBAAiB;MAClB,OAAO;QACH,GAAGF,KAAK;QACRL,mBAAmB,EAAE;MACzB,CAAC;IACL,KAAK,gBAAgB;MACjB,OAAO;QACH,GAAGK,KAAK;QACRN,MAAM,EAAEO,MAAM,CAACE,OAAO;QACtBR,mBAAmB,EAAE;MACzB,CAAC;IACL,KAAK,uBAAuB;MACxB,OAAO;QACH,GAAGK,KAAK;QACRL,mBAAmB,EAAE;MACzB,CAAC;IACL,KAAK,kBAAkB;MACnB,OAAO;QACH,GAAGK,KAAK;QACRH,oBAAoB,EAAE;MAC1B,CAAC;IACL,KAAK,iBAAiB;MAClB,OAAO;QACH,GAAGG,KAAK;QACRJ,OAAO,EAAEK,MAAM,CAACE,OAAO;QACvBN,oBAAoB,EAAE;MAC1B,CAAC;IACL,KAAK,wBAAwB;MACzB,OAAO;QACH,GAAGG,KAAK;QACRH,oBAAoB,EAAE;MAC1B,CAAC;IACL,KAAK,uBAAuB;MACxB,OAAO;QACH,GAAGG,KAAK;QACRF,YAAY,EAAEG,MAAM,CAACE;MACzB,CAAC;IACL;IACA;IACA,KAAK,cAAc;MACf;MACA,OAAO;QACH,GAAGH,KAAK;QACRN,MAAM,EAAE,CAAC,GAAGM,KAAK,CAACN,MAAM,EAAEO,MAAM,CAACE,OAAO;MAC5C,CAAC;IACL,KAAK,cAAc;MACf;MACA,MAAMC,WAAW,GAAGJ,KAAK,CAACN,MAAM,CAACW,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACE,OAAO,CAAC;MAC3E,OAAO;QACH,GAAGH,KAAK;QACRN,MAAM,EAAEU,WAAW;QACnB;QACAI,cAAc,EAAER,KAAK,CAACF,YAAY,KAAK,KAAK,GACxCM,WAAW,GACXA,WAAW,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACG,OAAO,KAAKT,KAAK,CAACF,YAAY;MACtE,CAAC;IACL;MAAS,OAAOE,KAAK;EACzB;AACJ,CAAC;AAED,eAAeD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}