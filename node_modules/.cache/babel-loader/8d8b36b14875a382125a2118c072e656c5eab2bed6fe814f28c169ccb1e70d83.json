{"ast":null,"code":"/*!\n * method-override\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar debug = require('debug')('method-override');\nvar methods = require('methods');\nvar parseurl = require('parseurl');\nvar querystring = require('querystring');\nvar vary = require('vary');\n\n/**\n * Method Override:\n *\n * Provides faux HTTP method support.\n *\n * Pass an optional `getter` to use when checking for\n * a method override.\n *\n * A string is converted to a getter that will look for\n * the method in `req.body[getter]` and a function will be\n * called with `req` and expects the method to be returned.\n * If the string starts with `X-` then it will look in\n * `req.headers[getter]` instead.\n *\n * The original method is available via `req.originalMethod`.\n *\n * @param {string|function} [getter=X-HTTP-Method-Override]\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nmodule.exports = function methodOverride(getter, options) {\n  var opts = options || {};\n\n  // get the getter fn\n  var get = typeof getter === 'function' ? getter : createGetter(getter || 'X-HTTP-Method-Override');\n\n  // get allowed request methods to examine\n  var methods = opts.methods === undefined ? ['POST'] : opts.methods;\n  return function methodOverride(req, res, next) {\n    var method;\n    var val;\n    req.originalMethod = req.originalMethod || req.method;\n\n    // validate request is an allowed method\n    if (methods && methods.indexOf(req.originalMethod) === -1) {\n      return next();\n    }\n    val = get(req, res);\n    method = Array.isArray(val) ? val[0] : val;\n\n    // replace\n    if (method !== undefined && supports(method)) {\n      req.method = method.toUpperCase();\n      debug('override %s as %s', req.originalMethod, req.method);\n    }\n    next();\n  };\n};\n\n/**\n * Create a getter for the given string.\n */\n\nfunction createGetter(str) {\n  if (str.substr(0, 2).toUpperCase() === 'X-') {\n    // header getter\n    return createHeaderGetter(str);\n  }\n  return createQueryGetter(str);\n}\n\n/**\n * Create a getter for the given query key name.\n */\n\nfunction createQueryGetter(key) {\n  return function (req, res) {\n    var url = parseurl(req);\n    var query = querystring.parse(url.query || '');\n    return query[key];\n  };\n}\n\n/**\n * Create a getter for the given header name.\n */\n\nfunction createHeaderGetter(str) {\n  var name = str.toLowerCase();\n  return function (req, res) {\n    // set appropriate Vary header\n    vary(res, str);\n\n    // get header\n    var header = req.headers[name];\n    if (!header) {\n      return undefined;\n    }\n\n    // multiple headers get joined with comma by node.js core\n    var index = header.indexOf(',');\n\n    // return first value\n    return index !== -1 ? header.substr(0, index).trim() : header.trim();\n  };\n}\n\n/**\n * Check if node supports `method`.\n */\n\nfunction supports(method) {\n  return method && typeof method === 'string' && methods.indexOf(method.toLowerCase()) !== -1;\n}","map":{"version":3,"names":["debug","require","methods","parseurl","querystring","vary","module","exports","methodOverride","getter","options","opts","get","createGetter","undefined","req","res","next","method","val","originalMethod","indexOf","Array","isArray","supports","toUpperCase","str","substr","createHeaderGetter","createQueryGetter","key","url","query","parse","name","toLowerCase","header","headers","index","trim"],"sources":["/Users/maxympetlyak/Desktop/REDUX/hero_admin_panel_template/node_modules/method-override/index.js"],"sourcesContent":["/*!\n * method-override\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('method-override')\nvar methods = require('methods')\nvar parseurl = require('parseurl')\nvar querystring = require('querystring')\nvar vary = require('vary')\n\n/**\n * Method Override:\n *\n * Provides faux HTTP method support.\n *\n * Pass an optional `getter` to use when checking for\n * a method override.\n *\n * A string is converted to a getter that will look for\n * the method in `req.body[getter]` and a function will be\n * called with `req` and expects the method to be returned.\n * If the string starts with `X-` then it will look in\n * `req.headers[getter]` instead.\n *\n * The original method is available via `req.originalMethod`.\n *\n * @param {string|function} [getter=X-HTTP-Method-Override]\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nmodule.exports = function methodOverride (getter, options) {\n  var opts = options || {}\n\n  // get the getter fn\n  var get = typeof getter === 'function'\n    ? getter\n    : createGetter(getter || 'X-HTTP-Method-Override')\n\n  // get allowed request methods to examine\n  var methods = opts.methods === undefined\n    ? ['POST']\n    : opts.methods\n\n  return function methodOverride (req, res, next) {\n    var method\n    var val\n\n    req.originalMethod = req.originalMethod || req.method\n\n    // validate request is an allowed method\n    if (methods && methods.indexOf(req.originalMethod) === -1) {\n      return next()\n    }\n\n    val = get(req, res)\n    method = Array.isArray(val)\n      ? val[0]\n      : val\n\n    // replace\n    if (method !== undefined && supports(method)) {\n      req.method = method.toUpperCase()\n      debug('override %s as %s', req.originalMethod, req.method)\n    }\n\n    next()\n  }\n}\n\n/**\n * Create a getter for the given string.\n */\n\nfunction createGetter (str) {\n  if (str.substr(0, 2).toUpperCase() === 'X-') {\n    // header getter\n    return createHeaderGetter(str)\n  }\n\n  return createQueryGetter(str)\n}\n\n/**\n * Create a getter for the given query key name.\n */\n\nfunction createQueryGetter (key) {\n  return function (req, res) {\n    var url = parseurl(req)\n    var query = querystring.parse(url.query || '')\n    return query[key]\n  }\n}\n\n/**\n * Create a getter for the given header name.\n */\n\nfunction createHeaderGetter (str) {\n  var name = str.toLowerCase()\n\n  return function (req, res) {\n    // set appropriate Vary header\n    vary(res, str)\n\n    // get header\n    var header = req.headers[name]\n\n    if (!header) {\n      return undefined\n    }\n\n    // multiple headers get joined with comma by node.js core\n    var index = header.indexOf(',')\n\n    // return first value\n    return index !== -1\n      ? header.substr(0, index).trim()\n      : header.trim()\n  }\n}\n\n/**\n * Check if node supports `method`.\n */\n\nfunction supports (method) {\n  return method &&\n    typeof method === 'string' &&\n    methods.indexOf(method.toLowerCase()) !== -1\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}